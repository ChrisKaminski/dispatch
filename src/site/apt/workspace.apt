		------------------
		Databinder: Workspace
		-----------------
		Nathan Hamblen
		------------------

Workspace

*Why bother?

	One of the strengths of working through Maven is that you can easily compile and run a Web application on the command line. That’s invaluable as a foundation, but your day-to-day programming will go a lot faster if you can compile, run, and debug your application within an IDE.
	
	Fortunately, Maven integrates with development environments so you don’t have to set things up twice.

*Eclipse

	The simplest and most efficient setup is to have Maven generate an Eclipse project file for your projects. This allows Eclipse to compile your sources in the background, which it is going to do anyway, while adhering to the Maven 2 directory structure. The first step is to add a Maven repository variable to your workspace with a command like this one:

-----------------------------------------------------
mvn -Declipse.workspace=/home/me/workspace eclipse:add-maven-repo
-----------------------------------------------------

	Then download available library sources and create the project metadata for Eclipse:

-----------------------------------------------------
mvn -Declipse.downloadSources=true eclipse:eclipse
-----------------------------------------------------

	Import the project to your Eclipse workspace. Its dependencies, source, and target directories will be ready to go.
	
*Eclipse plugins

	To run your Web application in Eclipse, you’ll need a plugin such as {{{http://jettylauncher.sourceforge.net/docs/}Jetty Launcher}}. It requires an installation of Jetty 5, that being the expanded {{{http://prdownloads.sourceforge.net/jetty/jetty-5.1.10.zip?download}Jetty download}} dumped anywhere on your hard drive. (Jetty 6 is still beta, and not supported by the launcher.) Follow the Jetty Launcher {{{http://jettylauncher.sourceforge.net/docs/quickstart.html}quickstart}} to get things running.

	{{{http://amateras.sourceforge.jp/cgi-bin/fswiki_en/wiki.cgi?page=EclipseHTMLEditor}Amateras HTML Editor}} is an HTML editor plugin with syntax folding and an almost-live preview. (Turn on the preview pane in preferences; it will update after every save.) Amateras’s install is a little tricky so you may want to postpone it until you’re working heavily in HTML. 
	
	When you do have it installed, turn off HTML syntax validation in the Amateras tab of your project preferences, as it will red-flag every instance of “wicket:preview.”

*NetBeans
	
	NetBeans is on the verge of greatness (and has been perched there since 1997). The good news is that it includes a servlet container (Tomcat) and an HTML Editor that’s almost as good as Amateras. Because it uses Swing instead of SWT, it looks and feels much better than Eclipse on Mac OS X, much worse than Eclipse on Linux, and about the same on Windows. So if you’re a GNOME-head, don’t waste your time (until Java 6), but Aquarians will be right at home.
	
	The bad news is NetBeans is still distinctly <second fiddle> to Eclipse in the free Java IDE orchestra. You won’t find as much support using it, or add-on goodies written for it. {{{http://maven.apache.org/guides/mini/guide-ide-netbeans/guide-ide-netbeans.html}These instructions}} for generating NetBeans projects with Maven 2 seem to be a complete fiction, so you’re left with the {{{http://docs.codehaus.org/display/MEVENIDE/MevenideNetBeans2.0}mevenide NetBeans plugin}}}. It seems to work all right, once you’ve patched over the second major bug described on its homepage. But compared to the lightweight route of Jetty+Eclipse with background compilation, it’s about as agile as a bean bag.
	
	So don’t go the NetBeans route unless you’re just looking to kill a Saturday afternoon. This section will be expanded, and the recommendation changed, as the connections between Maven 2 and NetBeans 5 improve.

*Ok, <<now>> make an application

	With your IDE tweaked-out and ready to go, it’s time to stop configuring and start programming. Read through the {{{examples.html}examples}} if you haven’t already, and try running them locally. Each one uses a different database; see their <<<hibernate.properties>>> files.

	When you add annotated classes to your Hibernate configuration, tables to hold them and their mapped properties will be automatically created as your application is starting up. Tables and columns will never be deleted, so drop them or the entire database yourself whenever you want a fresh start.

	If you run into trouble with Hibernate, check the {{{http://www.hibernate.org/329.html} Annotations FAQ}} for some sneaky traps they’ve lain. And if you need to do something complicated, it’s probably outlined somewhere in the {{{ http://www.hibernate.org/hib_docs/annotations/reference/en/html/}annotations}} or {{{http://www.hibernate.org/5.html#A3}core}} documentation.

	Now go pop a wheelie. If you skin your knees, we’ll help you out on the {{{/forum}forum}}.
