		------------------
		Databinder: Bookmarks example application
		-----------------
		Nathan Hamblen
		------------------

Bookmarks example application

*Description

	This is a very small Web application for adding and deleting Web bookmarks, but it manages to squeeze in just a touch of Ajax — can you find it? The sources appear below, excluding package and import statements in Java. You can also {{{/releases/bookmark-0.4.tar.gz} download}} it as a Maven 2 project.
	
	After you’ve skimmed through the code,  {{{/bookmark/app} add your own favorite site}}.
	
*BookmarksApplication.java

------------------------------------------------------------
/**
 * Simple app for adding, listing and deleting Web bookmarks.
 */
public class BookmarkApplication extends DataApplication {

	/** Go to ListAndAdd (the only page) if no page requested. */
	public Class getHomePage() {
		return ListAndAdd.class;
	}
	
	/** Set default configuration and mapping for Bookmark. */
	protected void configureHibernate(AnnotationConfiguration config) {
		super.configureHibernate(config);
		config.addAnnotatedClass(Bookmark.class);
	}
}
------------------------------------------------------------
	
*BookmarksApplication.properties

------------------------------------------------------------
RequiredValidator=Please enter something for ${label}. 
TypeValidator=Please check the format of ${label}.
------------------------------------------------------------

*Bookmark.java

------------------------------------------------------------
/**
 * Bookmark type with name and URL properties, automatically persisted.
 */
@Entity
public class Bookmark {
	private Integer id;
	private String name;
	private URL url;
	

	@Id @GeneratedValue(strategy = GenerationType.AUTO)
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public URL getUrl() {
		return url;
	}
	public void setUrl(URL url) {
		this.url = url;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
}
------------------------------------------------------------


*ListAndAdd.html

------------------------------------------------------------
<html>
<head>
<!-- apply css in a WYSIWYG editor, if server is running -->
<link href="http://localhost:8080/bookmark/app/resources/net.databinder.components.DataPage/DataPage.css" 
 type="text/css" rel="stylesheet" />
<wicket:head>
<!-- add local css, loads directly in WYSIWYG and via Wicket when running -->
<link wicket:id="bookmarkStylesheet" href="ListAndAdd.css" type="text/css" rel="stylesheet" />
</wicket:head>
<title>Bookmarks</title>
</head>
<body>
<!-- nothing outside of this extend renders in Wicket -->
<wicket:extend>

<h1 wicket:id="pageTitleHeader">Bookmarks</h1>
<div wicket:id="bookmarksWrap"> <!-- need wrapper for AJAX target -->
	<ul>
		<li wicket:id="bookmarks">
			<a wicket:id="url"href="#"><span wicket:id="name">My bookmark</span></a> 
			&mdash; <span class="date" wicket:id="created">Sun March 5, '06 16:49 EST</span>
			<a wicket:id="delete" href="#" title="Delete this item" 
			 onclick="return confirm('Are you sure you want to delete this bookmark?');">
				<img wicket:id="trash" src="trash.png" alt="Delete" />
			</a>
		</li>
<wicket:remove>
		<li>
			<a href="#">My other bookmark</a>
			&mdash; <span class="date">Sun March 5, '06 16:53 EST</span>
			<a href="#"><img src="trash.png" /></a>
		</li>
</wicket:remove>
	</ul>
</div>

<h2>Add new bookmark</h2>
<form wicket:id="entryForm">
	<p>URL <input wicket:id="url" type="text" style="width: 30em" /></p>
	<p>Name <input wicket:id="name" type="text" style="width: 15em" /></p>
	<input type="submit" value="Add" />
</form>
<p><a href="/bookmarks.html">About this application</a></p>
</wicket:extend>

</body>
</html>
------------------------------------------------------------

*ListAndAdd.css

------------------------------------------------------------
li img {
	vertical-align: middle;
	border: none;
	margin-left: .5em;
}

.date {
	font-style: italic;
}
------------------------------------------------------------

*trash.png

[images/trash.png]

*ListAndAdd.java

------------------------------------------------------------
/**
 * Single page for adding and deleting bookmarks.
 */
public class ListAndAdd extends DataPage {
	/** Used in DataPage as the page title, and below within the page. */ 
	protected String getName() {
		return "Bookmarks";
	}
	
	/** Adds components to page.  */
	public ListAndAdd() {
		super();
		
		// adds the page name as component for on-page display
		add(new Label("pageTitleHeader", new Model() {
			public Object getObject(Component component) {
				return getName();
			}
		}));
		
		// custom styles for this page
		add(new StyleLink("bookmarkStylesheet", ListAndAdd.class));
		
		final WebMarkupContainer bookmarksWrap = // wrapper to act as AJAX target
			new WebMarkupContainer("bookmarksWrap");
		add(bookmarksWrap.setOutputMarkupId(true));
		
		// data to list
		final IModel listModel = new HibernateListModel("from Bookmark order by name");
		// view of list
		bookmarksWrap.add(new PropertyListView("bookmarks", listModel) {
			protected void populateItem(final ListItem item) {
				item.add(new WebLink("url")	// link to the bookmarked page
					.add(new Label("name")));	// text to form body of anchor tag
				// date the item was added, with format string
				item.add(new DateLabel("created", "EE MMMM d, ’yy k:mm z"));
				// link to delete this bookmark
				item.add(new AjaxLink("delete") {
					/** Delete from persistent storage */
					public void onClick(AjaxRequestTarget target) {
						DataRequestCycle.getHibernateSession().delete(item.getModelObject());
						// commit transaction (automatic only for form submit)
						DataRequestCycle.getHibernateSession().getTransaction().commit();
						listModel.detach();
						// tell Wicket to update the bookmarks list through AJAX
						target.addComponent(bookmarksWrap);
					}
				}.add(new Image("trash", // add trash can image as anchor content 
						new PackageResourceReference(this.getClass(), "trash.png"))));
			}
		});
		add(new EntryForm("entryForm"));
	}
	
	/**
	 * Form for entering new Bookmark objects.
	 */
	public class EntryForm extends DataForm {
		/** Add entry components.	 */
		public EntryForm(String id) {
			super(id, Bookmark.class);	// embeds new Bookmark in a HibernateModel
															// inside a BoundCompoundPropertyModel
			add(new RequiredTextField("name")
				.setLabel(new Model("Name"))); // Labels used in error messages
			add(new RequiredTextField("url", URL.class) // required, type validation
					.setLabel(new Model("URL")));
		}
		/**
		 * Disassociates from its model after submission, since this form is
		 * for creating new objects only.
		 */
		protected void onSubmit() {
			super.onSubmit();			// saves to persistent storage
			clearPersistentObject();	// clears from form
		}
	}
}
------------------------------------------------------------

*Next…

	Did you find it? The Ajax is in the delete function; it deletes a bookmark without reloading the page (yes, just for kicks).

	Now head on to the {{{phone-directory.html}phone directory}} corral for a little more excitement.
