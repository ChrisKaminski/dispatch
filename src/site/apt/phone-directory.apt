		------------------
		Databinder: Phone directory example application
		-----------------
		Nathan Hamblen
		------------------

Phone directory example application

*Description

	This small Web application, a little more complicated than the {{{bookmarks.html} Bookmarks example}}, manages a list of names and phone numbers. Its source files appear below, excluding package and import statements in Java. You can also {{{/releases/directory-0.2.tar.gz} download}} it as a Maven 2 project.
	
	After you’ve looked over the code, {{{/directory/app} give ’er a flight test}}. Add your favorite celebrity (and delete your enemies).
	
*DirectoryApplication.java

------------------------------------------------------------
/**
 * Simple app for listing and editing phone numbers.
 */
public class DirectoryApplication extends DataApplication {

	/** Go to ListAndEdit(the only page) if no page requested. */
	protected Class getHomePage() {
		return ListAndEdit.class;
	}
	
	/** Set default config and map to Contact table. */
	protected void configureHibernate(AnnotationConfiguration config) {
		super.configureHibernate(config);
		config.addAnnotatedClass(Contact.class);
	}
}
------------------------------------------------------------
	
*DirectoryApplication.properties

------------------------------------------------------------
RequiredValidator=Please enter a value for ${label}. 
------------------------------------------------------------

*Contact.java

------------------------------------------------------------
/**
 * Contact type with basic properties, all automatically persisted.
 */
@Entity
public class Contact {
	private String name;
	private Integer id;
	private String phoneNumber;
	private Integer version;
	
	@Id @GeneratedValue(strategy = GenerationType.AUTO)
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getPhoneNumber() {
		return phoneNumber;
	}
	public void setPhoneNumber(String phoneNumber) {
		this.phoneNumber = phoneNumber;
	}
	/** Enable optimistic locking. */
	@Version
	public Integer getVersion() {
		return version;
	}
	public void setVersion(Integer version) {
		this.version = version;
	}	
}
------------------------------------------------------------

*ListAndEdit.html

------------------------------------------------------------
<html>
<head>
<!-- apply css in a WYSIWYG editor, if server is running -->
<link href="http://localhost:8080/directory/app/resources/net.databinder.components.DataPage/DataPage.css" 
 type="text/css" rel="stylesheet" />
</head>
<body>
<!-- nothing outside of this extend renders in Wicket -->
<wicket:extend>

<h1 wicket:id="pageTitleHeader">Phone Directory</h1>


<form wicket:id="searchForm">
	Name <input wicket:id="name" style="width: 6em" type="text" />
	Number <input wicket:id="phoneNumber" style="width: 6em" type="text" />
	<input type="submit" value="Search" />
	<input type="submit" wicket:id="reset" value="Clear Search" />
</form>
<table><tbody>
	<tr>
		<th>Name</th>
		<th>Phone Number</th>
	</tr>
	<tr class="a" wicket:id="contacts">
		<td><a wicket:id="link"><span wicket:id="name">Seth</span></a></td>
		<td wicket:id="phoneNumber">555-1212</td>
	</tr>
<wicket:remove>
	<tr class="b">
		<td><a><span>Summer</span></a></td>
		<td>555-1313</td>
	</tr>
</wicket:remove>
</tbody></table>

<p><a wicket:id="newLink" href="#">Edit new contact</a></p>

<form wicket:id="editForm">
	<h2 wicket:id="editHeader"> <!-- only one of these h2s renders -->
		Editing 
		<span wicket:id="name" style="font-style:italic">Someone</span>
	</h2>
	<h2 wicket:id="newHeader">Enter new contact</h2>
	<p>
		<label for="name">Name</label> 
		<input wicket:id="name" type="text" id="name" />
	</p>
	<p>
		<label for="phone">Phone number</label> 
		<input type="text" id="name" wicket:id="phoneNumber"/>
	</p>
	<p>
		<input type="submit" value="Save contact" /> 
		<input type="submit" value="Delete contact" wicket:id="delete" />
	</p>
</form>

<p><a href="/phone-directory.html">About this application</a></p>
</wicket:extend>
</body>
</html>
------------------------------------------------------------

*ListAndEdit.java

------------------------------------------------------------
/**
 * Single page for listing and editing names and phone numbers.
 */
public class ListAndEdit extends DataPage {
	private EditForm form;
	
	protected String getName() {
		return "Phone Directory";
	}
	
	public ListAndEdit() {
		super();
		
		// display title on page
		add(new Label("pageTitleHeader", new Model() {
			public Object getObject(Component component) {
				return getName();
			}
		}));	

		// the filter, updated by the form, affects query results
		SearchFilter searchFilter = new SearchFilter();
		add(new SearchForm("searchForm", searchFilter));
		
		// list of contacts, filter binds to query parameters
		IModel contactList = new HibernateListModel(getString("query"), searchFilter);
		add(new PropertyListView("contacts", contactList)  
		{
			protected void populateItem(final ListItem item) {
				item.add(new Link("link") {
					/** Change edit forms object to this one. */
					public void onClick() {
						form.setPersistentObject(item.getModelObject());
					}
				}.add(new Label("name")));
				item.add(new Label("phoneNumber"));
				item.add(new AlternatingClassModifier(item)); // table row color
			}
		});
		
		add(new Link("newLink") {
			public void onClick() {
				form.clearPersistentObject();
			}
			public boolean isVisible() {
				return form.getContact().getId() != null; // hide if already new
			}
		});
		
		add(form = new EditForm("editForm"));		// edits a selected contact
	}
	
	/**
	 * Binds query parameters to its public properties. Extends Contact to skip
	 * defining similar properties.
	 */
	private static class SearchFilter extends Contact 
			implements IQueryBinder, Serializable {
		public void bind(org.hibernate.Query query) {
			query.setString("name", matchAnywhere(getName()));
			query.setString("phoneNumber", matchAnywhere(getPhoneNumber()));
		}
		private String matchAnywhere(String str) {
			return str == null ? null : "%" + str + "%";
		}
	}
	
	/**
	 * Update contacts listing by changing the search filter's properties.
	 */
	public class SearchForm extends Form {
		public SearchForm(String id, SearchFilter filter) {
			// wrap the filter in a compound model for easy updating
			super(id, new CompoundPropertyModel(filter));
			final TextField name, number;
			add(name = new TextField("name"));
			add(number = new TextField("phoneNumber"));
			add(new Button("reset") {
				/** Hide reset button if already blank. */
				public boolean isVisible() {
					return name.getModelObject() != null 
						|| number.getModelObject() != null;
				}
				protected void onSubmit() {
					name.setModelObject(null);
					number.setModelObject(null);
				}
			});
		}
	}
	
	/**
	 * Edit a selected or new Contact.
	 */
	public class EditForm extends DataForm {
		public EditForm(String id) {
			super(id, Contact.class);
			// use one of two headers depending on ID state
			WebMarkupContainer editHeader = new WebMarkupContainer("editHeader") {
				public boolean isVisible() {
					return getContact().getId() != null;
				}
			};
			add(editHeader.add(new Label("name")));
			add(new WebMarkupContainer("newHeader") {
				public boolean isVisible() {
					return getContact().getId() == null;
				}
			});

			// label appears in failed validation message
			add(new RequiredTextField("name").setLabel(new Model("contact name")));
			add(new TextField("phoneNumber"));
			
			add(new Button("delete"){
				/** Perform Contact delete. */
				protected void onSubmit() {
					deletePersistentObject();
					clearPersistentObject();
				}
				/** Hide if not yet saved. */
				public boolean isVisible() {
					return getContact().getId() != null;
				}
			}.setDefaultFormProcessing(false)); // default processing saves object
		}
		
		/** Convenience, retrieve and cast our model. */
		protected Contact getContact() {
			return (Contact) getModelObject();
		}
	}
}

------------------------------------------------------------

*Next…

	What, you’re too smart for these trivial apps? Time to {{{setup-guide.html}set up Databinder}} and make the sexiest order provisioning system your department has ever seen!
