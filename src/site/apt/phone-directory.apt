		------------------
		Databinder: Phone directory example application
		-----------------
		Nathan Hamblen
		------------------

Phone directory example application

*Description

	This small Web application, a little more complicated than the {{{bookmarks.html} bookmarks example}}, manages a list of names and phone numbers. Its source files appear below, excluding package and import statements in Java. You can also {{{/releases/directory-0.4.tar.gz} download}} it as a Maven 2 project.

	After you’ve looked over the code, {{{/directory/app} give ’er a flight test}}. This time the Ajax functionality should be obvious as you use the application, though you may not have noticed it in the sources. The live search is implemented through a Databinder component, <<<SearchPanel>>>, that controls a label, textfield, and clear button.

	And if you want to see Databinder’s built-in versioning support in action, open two browsers and edit the same entry in each one. That’s right, <just try> to break the optimistic lock.
	
*DirectoryApplication.java

------------------------------------------------------------
/**
 * Simple app for listing and editing phone numbers.
 */
public class DirectoryApplication extends DataApplication {

	/** Go to ListAndEdit(the only page) if no page requested. */
	public Class getHomePage() {
		return ListAndEdit.class;
	}
	
	/** Set default config and map to Contact table. */
	protected void configureHibernate(AnnotationConfiguration config) {
		super.configureHibernate(config);
		config.addAnnotatedClass(Contact.class);
	}
}
------------------------------------------------------------
	
*DirectoryApplication.properties

------------------------------------------------------------
RequiredValidator=Please enter something for ${label}. 
------------------------------------------------------------

*Contact.java

------------------------------------------------------------
/**
 * Contact type with basic properties, all automatically persisted.
 */
@Entity
public class Contact {
	private String name;
	private Integer id;
	private String phoneNumber;
	private Integer version;
	
	@Id @GeneratedValue(strategy = GenerationType.AUTO)
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getPhoneNumber() {
		return phoneNumber;
	}
	public void setPhoneNumber(String phoneNumber) {
		this.phoneNumber = phoneNumber;
	}
	/** Enable optimistic locking. */
	@Version
	public Integer getVersion() {
		return version;
	}
	public void setVersion(Integer version) {
		this.version = version;
	}	
}
------------------------------------------------------------

*ListAndEdit.html

------------------------------------------------------------
<html>
<head>
<!-- apply css in a WYSIWYG editor, if server is running -->
<link href="http://localhost:8080/directory/app/resources/net.databinder.components.DataPage/DataPage.css" 
 type="text/css" rel="stylesheet" />
<wicket:head>
<link wicket:id="stylesheet" href="ListAndEdit.css" type="text/css" rel="stylesheet" />
</wicket:head>
</head>
<body>
<!-- nothing outside of this extend renders in Wicket -->
<wicket:extend>

<h1 wicket:id="pageTitleHeader">Phone Directory</h1>

<div id="listings">
<h2>Contact listings</h2>

<div wicket:id="search">
	<!-- The live search panel's (more complicated) contents will replace this filler, 
		but should render about the same. -->
	Search <input type="text" />
</div>

<div wicket:id="contactsWrap">
	<table><tbody>
		<tr>
			<th>Name</th>
			<th>Phone Number</th>
		</tr>
		<tr class="a" wicket:id="contacts">
			<td><a wicket:id="link" href="#"><span wicket:id="name">Seth</span></a></td>
			<td wicket:id="phoneNumber">555-1212</td>
		</tr>
	<wicket:remove>
		<tr class="b">
			<td><a href="#"><span>Summer</span></a></td>
			<td>555-1313</td>
		</tr>
	</wicket:remove>
	</tbody></table>
</div>

</div>

<div id="edit">

<form wicket:id="editForm">
	<div wicket:id="editHeader"> <!-- only one of the headers renders -->
		<h2 style="margin-bottom: 0">
			Editing 
			<span wicket:id="name" style="font-style:italic">Someone</span>
		</h2>
		<div><a wicket:id="newLink" href="#">Enter new contact</a></div>
	</div>
	<h2 wicket:id="newHeader">Enter new contact</h2>

	<p>
		<label for="name">Name</label> 
		<input wicket:id="name" type="text" id="name" />
	</p>
	<p>
		<label for="phone">Phone number</label> 
		<input type="text" id="phone" wicket:id="phoneNumber"/>
	</p>
	<p>
		<input type="submit" value="Save contact" /> 
		<input type="submit" value="Delete contact" wicket:id="delete"
			onclick="return confirm('Are you sure you want to delete this contact?');" />
	</p>
</form>
</div>

<p id="footer"><a href="/phone-directory.html">About this application</a></p>

</wicket:extend>
</body>
</html>
------------------------------------------------------------

*ListAndEdit.css

------------------------------------------------------------
div#listings {
	float: left; 
	width: 25em;
}

input {
	width: 10em;
}

div.searchPanel {
	margin-bottom: .5em;
}

table {
	width: 100%;
	clear: both;
}

div#edit {
	float: left;
	margin: 3.5em 0 0 2em;
	padding: 	1em 1.5em 0 1.5em;
	background: #FFE7D8;
	border: dashed thin #E9996E;
}

div#edit h2{
	margin-top: 0;
}

p#footer {
	position: absolute;
	bottom: .5em;
	right: 1.5em;
}
------------------------------------------------------------

*ListAndEdit.properties

------------------------------------------------------------
query=from Contact where \
	(:search is null or (name like :search \
		or phoneNumber like :search) \
	) order by name	
------------------------------------------------------------

*ListAndEdit.java

------------------------------------------------------------
/**
 * Single page for listing and editing names and phone numbers.
 */
public class ListAndEdit extends DataPage {
	private EditForm form;
	private WebMarkupContainer contactsWrap;
	
	protected String getName() {
		return "Phone Directory";
	}
	
	public ListAndEdit() {
		super();
		
		// display title on page
		add(new Label("pageTitleHeader", new Model() {
			public Object getObject(Component component) {
				return getName();
			}
		}));
		
		add(new StyleLink("stylesheet", ListAndEdit.class));

		// panel for a live AJAX search 
		final SearchPanel search = new SearchPanel("search", new Model(null)) {
			public void onUpdate(AjaxRequestTarget target) {
				target.addComponent(contactsWrap);
			}
		};
		add(search);
		
		// list of contacts, default search binder does a find-anywhere match 
		final IModel contactList = new HibernateListModel(getString("query"), 
			search.getQueryBinder());
		add(contactsWrap = new WebMarkupContainer("contactsWrap"));
		contactsWrap.setOutputMarkupId(true);
		contactsWrap.add(new PropertyListView("contacts", contactList)  
		{
			protected void populateItem(final ListItem item) {
				item.add(new Link("link") {
					/** Change edit forms object to this one. */
					public void onClick() {
						form.setPersistentObject(item.getModelObject());
					}
				}.add(new Label("name")));
				item.add(new Label("phoneNumber"));
				item.add(new AlternatingClassModifier(item)); // table row color
			}
		});
		
		add(form = new EditForm("editForm"));		// edits a selected contact
	}
	
	/**
	 * Edit a selected or new Contact.
	 */
	public class EditForm extends DataForm {
		public EditForm(String id) {
			super(id, Contact.class);
			// use one of two headers depending on ID state
			WebMarkupContainer editHeader = new WebMarkupContainer("editHeader") {
				public boolean isVisible() {
					return getContact().getId() != null;
				}
			};
			add(editHeader.add(new Label("name")));
			editHeader.add(new Link("newLink") {
				public void onClick() {
					clearPersistentObject();
				}
			});
			add(new WebMarkupContainer("newHeader") {
				public boolean isVisible() {
					return getContact().getId() == null;
				}
			});

			// label appears in failed validation message
			add(new RequiredTextField("name").setLabel(new Model("contact name")));
			add(new TextField("phoneNumber"));
			
			add(new Button("delete"){
				/** Perform Contact delete. */
				protected void onSubmit() {
					deletePersistentObject();
					// commit transaction
					DataRequestCycle.getHibernateSession().getTransaction().commit();
					clearPersistentObject();
				}
				/** Hide if not yet saved. */
				public boolean isVisible() {
					return getContact().getId() != null;
				}
			}.setDefaultFormProcessing(false)); // default processing saves object
		}
		
		/** Convenience, retrieve and cast our model. */
		protected Contact getContact() {
			return (Contact) getModelObject();
		}
	}
}

------------------------------------------------------------

*Next…

	Your training is almost complete. But, like Jade Fox in <Crouching Tiger, Hidden Dragon>, Databinder has one last {{{recipe-book.html}lesson}} for you, precocious one.
